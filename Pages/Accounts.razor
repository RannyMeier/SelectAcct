@page "/accts"
@using System.Timers
@implements IDisposable
@inject EntSelService SelectService
<h3>Accounts</h3>

<input class="form-control" @bind="FilterStr" @bind:event="oninput" />

@if (filteredEnts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="height: 100%">
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>ValStrs</th>
                    <th>Name</th>
                    <th>Number</th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="@filteredEnts" Context="ent">
                    <tr>
                        <td>@ent.Id</td>
                        <td>@ent.ValStrs</td>
                        <td>@ent.Name</td>
                        <td>@ent.Number</td>
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    </div>

}

@code {
    private Timer _debounceTimer;
    private List<EntSel> ents;
    private List<EntSel> filteredEnts;
    private string filterStr;

    protected override async Task OnInitializedAsync()
    {
        _debounceTimer = new Timer();
        _debounceTimer.Interval = 1700;
        _debounceTimer.AutoReset = false;
        _debounceTimer.Elapsed += Filter;
        ents = await SelectService.GetAcctsAsync();
        filteredEnts = ents;
    }

    private async void Filter(Object source, ElapsedEventArgs e)
    {
        if (filterStr.Length > 0)
        {
            //filteredEnts = await Task.FromResult(accts.Where(a => a.ValStrs.Contains(filterStr)).ToList());

            string[] terms = String.Concat(filterStr, "   ").Split(" ");
            filteredEnts = await Task.FromResult(ents.Where(a =>
            a.ValStrs.IndexOf(terms[0], StringComparison.OrdinalIgnoreCase) != -1
            && a.ValStrs.IndexOf(terms[1], StringComparison.OrdinalIgnoreCase) != -1
            && a.ValStrs.IndexOf(terms[2], StringComparison.OrdinalIgnoreCase) != -1
            ).ToList());
        }
        else
            filteredEnts = ents;
        await InvokeAsync(StateHasChanged);
    }

    private string FilterStr
    {
        get => filterStr;
        set
        {
            if (value != filterStr)
            {
                filterStr = value;
                _debounceTimer.Stop();
                _debounceTimer.Start();
            }

        }
    }

    void IDisposable.Dispose()
    {
        _debounceTimer.Elapsed -= Filter;
    }

}
